#!/usr/bin/env bash

set -euo pipefail

bindir=~/bin

function determine_os() {
    os=$(uname -s)
    case ${os} in
        Darwin)
            echo "darwin"
            ;;
        Linux)
            echo "linux"
            ;;
        *)
            >&2 echo "Unknown operating system ${os}. Can't perform update."
            exit 1
            ;;
    esac
}

function determine_arch() {
    arch=$(uname -m)
    case ${arch} in
        armv7l)
            echo "arm"
            ;;
        aarch64)
            echo "arm64"
            ;;
        x86_64)
            echo "amd64"
            ;;
        *)
            >&2 echo "Unknown architecture ${arch}. Can't perform update."
            exit 1
            ;;
    esac
}

function update() {
    helm_version=$(curl -fs https://api.github.com/repos/helm/helm/releases/latest | jq '.tag_name' -r)
    echo "Fetching latest Helm release ${helm_version}..."
    if [ -x ${bindir}/helm-"${helm_version#v}" ] ; then
        echo "Latest version ${helm_version} already installed, skipping update."
        return
    fi
    fetch_version ${helm_version}
}

function fetch_version() {
    helm_version=${1}
    os=$(determine_os)
    arch=$(determine_arch)
    tmpdir=$(mktemp -d)
    cd "$tmpdir"
    curl -fo helm.tar.gz https://get.helm.sh/helm-"${helm_version}"-${os}-${arch}.tar.gz
    tar -xzf helm.tar.gz
    mv ${os}-${arch}/helm ${bindir}/helm-"${helm_version#v}"
    rm -rf "${tmpdir}"
}

function set_version() {
    rm -f ${bindir}/helm
    ln -s "${bindir}/helm-${1}" ${bindir}/helm
}

cur=""
if [ -f ${bindir}/helm ] ; then
    cur=$(basename "$(readlink -f ${bindir}/helm)" | cut -d"-" -f2)
fi

case ${1:-} in
    up|update)
        update
        ;;
    v*)
        req=${1#v}
        for hv in "${versions[@]}" ; do
            if [[ "${hv}" == "${req}" ]] ; then
                set_version ${req}
                echo "set version to ${req}"
                exit 0
            fi
        done
        fetch_version ${1}
        set_version ${req}
        echo "set version to ${req}"
        exit 0
esac

i=0
mapfile -t versions < <(for v in ~/bin/helm-* ; do v=$(basename $v); echo ${v#helm-} ; done)


if [ ${#versions[@]} == 0 ] ; then
    echo "No helm binary found in ${bindir}, exiting."
    exit 1
fi

for hv in "${versions[@]}" ; do
    v=$(basename "$hv"|cut -d"-" -f2)
    echo -n "[${i}] "
    echo -n "$v"
    if [[ "$v" == "$cur" ]] ; then
        echo -n " *"
    fi
    echo ""
    (( ++i ))
done

echo -n "> "
read -r sel

if [ -z "${sel}" ] ; then
    echo "Not changing version, have a nice day!"
    exit 0
fi

if [ -z "${versions[$sel]}" ] ; then
    echo "I don't know that version, exiting"
    exit 1
fi

set_version "${versions[$sel]}"
